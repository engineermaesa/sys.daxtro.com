PRAGMA foreign_keys=OFF;
BEGIN TRANSACTION;
CREATE TABLE IF NOT EXISTS "migrations" ("id" integer primary key autoincrement not null, "migration" varchar not null, "batch" integer not null);
INSERT INTO migrations VALUES(1,'2025_06_07_000001_create_ref',1);
INSERT INTO migrations VALUES(2,'2025_06_07_000002_create_user',1);
INSERT INTO migrations VALUES(3,'2025_06_07_000003_create_attachment',1);
INSERT INTO migrations VALUES(4,'2025_06_07_000004_create_lead',1);
INSERT INTO migrations VALUES(5,'2025_06_07_000005_create_meeting',1);
INSERT INTO migrations VALUES(6,'2025_06_07_000006_create_quotation',1);
INSERT INTO migrations VALUES(7,'2025_06_07_000007_create_proforma',1);
INSERT INTO migrations VALUES(8,'2025_06_07_000008_create_order',1);
INSERT INTO migrations VALUES(9,'2025_06_07_000009_create_invoice',1);
INSERT INTO migrations VALUES(10,'2025_06_07_000010_create_finance_requests',1);
INSERT INTO migrations VALUES(11,'2025_06_07_000011_add_branch_id_to_leads',2);
INSERT INTO migrations VALUES(12,'2025_06_07_000012_drop_region_id_from_users',3);
INSERT INTO migrations VALUES(13,'2025_07_09_190941_add_fob_price_to_ref_products_table',3);
INSERT INTO migrations VALUES(14,'2025_07_09_192125_add_sku_to_ref_parts_table',3);
INSERT INTO migrations VALUES(15,'2025_07_09_194159_create_ref_product_types_table',3);
INSERT INTO migrations VALUES(16,'2025_07_09_194657_add_product_type_id_to_ref_products_table',3);
INSERT INTO migrations VALUES(17,'2025_07_10_000012_add_first_sales_id_to_leads',3);
INSERT INTO migrations VALUES(18,'2025_07_10_000014_add_bdi_price_to_ref_products_table',3);
INSERT INTO migrations VALUES(19,'2025_07_12_000015_add_new_lead_sources',3);
INSERT INTO migrations VALUES(20,'2025_07_17_000015_add_company_and_customer_type_to_leads',3);
INSERT INTO migrations VALUES(21,'2025_07_26_000016_add_aftersales_lead_source',3);
INSERT INTO migrations VALUES(22,'2025_07_26_000016_make_segment_id_nullable_on_leads',3);
INSERT INTO migrations VALUES(23,'2025_07_26_000017_remove_bdi_from_lead_segments',3);
INSERT INTO migrations VALUES(24,'2025_07_27_014028_add_description_to_quotation_payment_terms_table',3);
INSERT INTO migrations VALUES(25,'2025_08_01_000017_add_tonase_to_leads',3);
INSERT INTO migrations VALUES(26,'2025_08_02_000018_add_ref_provinces_permission',3);
INSERT INTO migrations VALUES(27,'2025_08_03_000019_create_ref_customer_types_table',3);
INSERT INTO migrations VALUES(28,'2025_08_04_000021_add_customer_types_permission',3);
INSERT INTO migrations VALUES(29,'2025_08_04_000022_remove_refund_meeting_request_type',3);
INSERT INTO migrations VALUES(30,'2025_08_05_000023_make_payment_confirmation_fields_nullable',3);
INSERT INTO migrations VALUES(31,'2025_08_05_000024_create_meeting_types_table',3);
INSERT INTO migrations VALUES(32,'2025_08_05_000025_add_meeting_type_to_lead_meetings',3);
INSERT INTO migrations VALUES(33,'2025_08_06_000024_add_trash_note_to_lead_claims',3);
INSERT INTO migrations VALUES(34,'2025_08_06_000024_create_ref_industries_table',3);
INSERT INTO migrations VALUES(35,'2025_08_06_000025_add_industry_id_to_leads',3);
INSERT INTO migrations VALUES(36,'2025_08_06_000026_create_lead_pic_extensions_table',3);
INSERT INTO migrations VALUES(37,'2025_08_06_000027_create_ref_jabatans_table',3);
INSERT INTO migrations VALUES(38,'2025_08_06_000028_add_jabatan_id_to_leads',3);
INSERT INTO migrations VALUES(39,'2025_08_06_000029_add_other_industry_to_leads',3);
INSERT INTO migrations VALUES(40,'2025_08_06_000030_add_address_to_ref_branches',3);
INSERT INTO migrations VALUES(41,'2025_08_06_000030_create_quotation_signed_documents',3);
INSERT INTO migrations VALUES(42,'2025_08_06_000031_add_jabatan_to_lead_pic_extensions',3);
INSERT INTO migrations VALUES(43,'2025_08_07_000032_add_attachment_id_to_order_progress_logs',3);
INSERT INTO migrations VALUES(44,'2025_08_07_000033_create_quotation_logs',3);
INSERT INTO migrations VALUES(45,'2025_08_07_000034_add_waiting_result_to_lead_meetings',3);
INSERT INTO migrations VALUES(46,'2025_08_08_000034_create_lead_activity_lists_table',3);
INSERT INTO migrations VALUES(47,'2025_08_08_000035_create_lead_activity_logs_table',3);
INSERT INTO migrations VALUES(48,'2025_08_08_000036_create_payment_logs_table',3);
INSERT INTO migrations VALUES(49,'2025_08_08_000037_add_attachment_id_to_lead_activity_logs',3);
INSERT INTO migrations VALUES(50,'2025_09_06_115433_create_cache_table',4);
CREATE TABLE IF NOT EXISTS "ref_companies" ("id" integer primary key autoincrement not null, "name" varchar, "address" text, "phone" varchar, "created_at" datetime, "updated_at" datetime, "deleted_at" datetime);
CREATE TABLE IF NOT EXISTS "ref_banks" ("id" integer primary key autoincrement not null, "name" varchar, "created_at" datetime, "updated_at" datetime, "deleted_at" datetime);
CREATE TABLE IF NOT EXISTS "ref_accounts" ("id" integer primary key autoincrement not null, "company_id" integer not null, "bank_id" integer not null, "account_number" varchar, "holder_name" varchar, "created_at" datetime, "updated_at" datetime, "deleted_at" datetime, foreign key("company_id") references "ref_companies"("id") on delete restrict on update restrict, foreign key("bank_id") references "ref_banks"("id") on delete restrict on update restrict);
CREATE TABLE IF NOT EXISTS "ref_product_categories" ("id" integer primary key autoincrement not null, "name" varchar, "code" varchar, "created_at" datetime, "updated_at" datetime, "deleted_at" datetime);
CREATE TABLE IF NOT EXISTS "ref_parts" ("id" integer primary key autoincrement not null, "name" varchar not null, "price" double not null, "created_at" datetime, "updated_at" datetime, "deleted_at" datetime, "sku" varchar);
CREATE TABLE IF NOT EXISTS "ref_product_parts" ("id" integer primary key autoincrement not null, "product_id" integer not null, "part_id" integer not null, "created_at" datetime, "updated_at" datetime, foreign key("product_id") references "ref_products"("id") on delete restrict on update restrict, foreign key("part_id") references "ref_parts"("id") on delete restrict on update restrict);
CREATE TABLE IF NOT EXISTS "ref_product_category" ("id" integer primary key autoincrement not null, "product_id" integer not null, "category_id" integer not null, "created_at" datetime, "updated_at" datetime, foreign key("product_id") references "ref_products"("id") on delete restrict on update restrict, foreign key("category_id") references "ref_product_categories"("id") on delete restrict on update restrict);
CREATE TABLE IF NOT EXISTS "ref_branches" ("id" integer primary key autoincrement not null, "company_id" integer not null, "name" varchar, "code" varchar, "created_at" datetime, "updated_at" datetime, "deleted_at" datetime, "address" text, foreign key("company_id") references "ref_companies"("id") on delete restrict on update restrict);
CREATE TABLE IF NOT EXISTS "ref_regionals" ("id" integer primary key autoincrement not null, "name" varchar, "created_at" datetime, "updated_at" datetime, "deleted_at" datetime);
CREATE TABLE IF NOT EXISTS "ref_provinces" ("id" integer primary key autoincrement not null, "regional_id" integer not null, "name" varchar, "created_at" datetime, "updated_at" datetime, "deleted_at" datetime, foreign key("regional_id") references "ref_regionals"("id") on delete restrict on update restrict);
CREATE TABLE IF NOT EXISTS "ref_regions" ("id" integer primary key autoincrement not null, "regional_id" integer not null, "province_id" integer not null, "branch_id" integer not null, "name" varchar, "code" varchar, "created_at" datetime, "updated_at" datetime, "deleted_at" datetime, foreign key("regional_id") references "ref_regionals"("id") on delete restrict on update restrict, foreign key("province_id") references "ref_provinces"("id") on delete restrict on update restrict, foreign key("branch_id") references "ref_branches"("id") on delete restrict on update restrict);
CREATE TABLE IF NOT EXISTS "ref_expense_types" ("id" integer primary key autoincrement not null, "name" varchar, "created_at" datetime, "updated_at" datetime, "deleted_at" datetime);
CREATE TABLE IF NOT EXISTS "user_roles" ("id" integer primary key autoincrement not null, "name" varchar, "code" varchar, "created_at" datetime, "updated_at" datetime, "deleted_at" datetime);
INSERT INTO user_roles VALUES(1,'Super Admin','super_admin','2025-09-06 20:10:10','2025-09-06 20:10:10',NULL);
INSERT INTO user_roles VALUES(2,'Sales','sales','2025-09-07 03:16:01','2025-09-07 03:16:01',NULL);
INSERT INTO user_roles VALUES(3,'Sales Director','sales_director','2025-09-07 03:16:01','2025-09-07 03:16:01',NULL);
INSERT INTO user_roles VALUES(4,'Branch Manager','branch_manager','2025-09-07 03:16:01','2025-09-07 03:16:01',NULL);
INSERT INTO user_roles VALUES(5,'Finance','finance','2025-09-07 03:16:01','2025-09-07 03:16:01',NULL);
INSERT INTO user_roles VALUES(6,'Finance Director','finance_director','2025-09-07 03:16:01','2025-09-07 03:16:01',NULL);
INSERT INTO user_roles VALUES(7,'Accountant','accountant','2025-09-07 03:16:01','2025-09-07 03:16:01',NULL);
INSERT INTO user_roles VALUES(8,'Accountant Director','accountant_director','2025-09-07 03:16:01','2025-09-07 03:16:01',NULL);
INSERT INTO user_roles VALUES(9,'Purchasing','purchasing','2025-09-07 03:16:01','2025-09-07 03:16:01',NULL);
CREATE TABLE IF NOT EXISTS "password_reset_tokens" ("email" varchar not null, "token" varchar not null, "created_at" datetime);
CREATE TABLE IF NOT EXISTS "user_permissions" ("id" integer primary key autoincrement not null, "name" varchar, "code" varchar, "description" varchar, "created_at" datetime, "updated_at" datetime, "deleted_at" datetime);
INSERT INTO user_permissions VALUES(1,'Ref Provinces','masters.provinces','Manage ref provinces',NULL,NULL,NULL);
INSERT INTO user_permissions VALUES(2,'Customer Types','masters.customer-types','Manage customer types',NULL,NULL,NULL);
INSERT INTO user_permissions VALUES(3,'Dashboard','dashboard','Access dashboard',NULL,NULL,NULL);
INSERT INTO user_permissions VALUES(4,'Banks','masters.banks','Manage banks',NULL,NULL,NULL);
INSERT INTO user_permissions VALUES(5,'Accounts','masters.accounts','Manage accounts',NULL,NULL,NULL);
INSERT INTO user_permissions VALUES(6,'Product Categories','masters.product-categories','Manage product categories',NULL,NULL,NULL);
INSERT INTO user_permissions VALUES(7,'Products','masters.products','Manage products',NULL,NULL,NULL);
INSERT INTO user_permissions VALUES(8,'Parts','masters.parts','Manage parts',NULL,NULL,NULL);
INSERT INTO user_permissions VALUES(9,'Companies','masters.companies','Manage companies',NULL,NULL,NULL);
INSERT INTO user_permissions VALUES(10,'Regions','masters.regions','Manage regions',NULL,NULL,NULL);
INSERT INTO user_permissions VALUES(11,'Branches','masters.branches','Manage branches',NULL,NULL,NULL);
INSERT INTO user_permissions VALUES(12,'Expense Types','masters.expense-types','Manage expense types',NULL,NULL,NULL);
INSERT INTO user_permissions VALUES(13,'Manage Leads','leads.manage','Manage leads',NULL,NULL,NULL);
INSERT INTO user_permissions VALUES(14,'Available Leads','leads.available','View available leads',NULL,NULL,NULL);
INSERT INTO user_permissions VALUES(15,'My Leads','leads.my','View my leads',NULL,NULL,NULL);
INSERT INTO user_permissions VALUES(16,'Trash Leads','leads.trash','View trash leads',NULL,NULL,NULL);
INSERT INTO user_permissions VALUES(17,'Orders','orders','Manage orders',NULL,NULL,NULL);
INSERT INTO user_permissions VALUES(18,'Incentive Dashboard','incentives.view','View incentive balance and logs',NULL,NULL,NULL);
INSERT INTO user_permissions VALUES(19,'Finance Requests','finance.requests','Handle finance approvals',NULL,NULL,NULL);
INSERT INTO user_permissions VALUES(20,'Manage Users','users.manage','Manage users',NULL,NULL,NULL);
INSERT INTO user_permissions VALUES(21,'Roles','users.roles','Manage roles',NULL,NULL,NULL);
INSERT INTO user_permissions VALUES(22,'Permissions Settings','settings.permissions-settings','Manage permissions settings',NULL,NULL,NULL);
INSERT INTO user_permissions VALUES(23,'Settings','settings.general-settings','Manage general settings',NULL,NULL,NULL);
CREATE TABLE IF NOT EXISTS "user_role_permissions" ("id" integer primary key autoincrement not null, "role_id" integer not null, "permission_id" integer not null, "created_at" datetime, "updated_at" datetime, "deleted_at" datetime, foreign key("role_id") references "user_roles"("id") on delete restrict on update restrict, foreign key("permission_id") references "user_permissions"("id") on delete restrict on update restrict);
INSERT INTO user_role_permissions VALUES(5,1,1,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(6,1,2,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(7,1,3,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(8,1,4,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(9,1,5,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(10,1,6,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(11,1,7,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(12,1,8,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(13,1,9,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(14,1,10,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(15,1,11,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(16,1,12,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(17,1,13,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(18,1,14,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(19,1,16,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(20,1,17,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(21,1,18,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(22,1,19,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(23,1,20,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(24,1,21,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(25,1,22,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(26,1,23,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(27,3,3,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(28,3,13,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(29,3,14,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(30,3,16,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(31,3,17,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(32,3,19,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(33,3,20,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(34,3,21,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(35,3,22,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(36,3,23,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(37,6,3,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(38,6,13,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(39,6,14,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(40,6,16,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(41,6,17,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(42,6,19,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(43,6,20,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(44,6,21,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(45,6,22,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(46,6,23,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(47,8,3,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(48,8,13,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(49,8,14,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(50,8,16,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(51,8,17,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(52,8,19,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(53,8,20,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(54,8,21,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(55,8,22,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(56,8,23,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(57,4,3,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(58,4,13,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(59,4,17,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(60,4,20,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(61,5,3,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(62,5,13,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(63,5,17,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(64,5,19,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(65,7,3,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(66,7,13,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(67,7,17,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(68,9,3,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(69,9,17,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(70,2,3,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(71,2,14,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(72,2,15,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(73,2,16,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(74,2,17,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(75,2,18,NULL,NULL,NULL);
INSERT INTO user_role_permissions VALUES(76,1,15,'2025-09-06 20:17:44','2025-09-06 20:17:44',NULL);
CREATE TABLE IF NOT EXISTS "user_activity_logs" ("id" integer primary key autoincrement not null, "user_id" integer, "action" varchar not null, "model_type" varchar, "model_id" integer, "description" text, "data" text, "ip_address" varchar, "user_agent" varchar, "created_at" datetime, "updated_at" datetime, foreign key("user_id") references "users"("id") on delete set null on update cascade);
CREATE TABLE IF NOT EXISTS "attachments" ("id" integer primary key autoincrement not null, "type" varchar, "file_path" varchar, "mime_type" varchar, "size" integer, "uploaded_by" integer not null, "created_at" datetime, "updated_at" datetime, "deleted_at" datetime, foreign key("uploaded_by") references "users"("id") on delete restrict on update restrict);
CREATE TABLE IF NOT EXISTS "lead_sources" ("id" integer primary key autoincrement not null, "name" varchar);
INSERT INTO lead_sources VALUES(1,'Repeat Order');
INSERT INTO lead_sources VALUES(2,'Sales Independen');
INSERT INTO lead_sources VALUES(3,'Aftersales');
CREATE TABLE IF NOT EXISTS "lead_segments" ("id" integer primary key autoincrement not null, "name" varchar);
CREATE TABLE IF NOT EXISTS "lead_statuses" ("id" integer primary key autoincrement not null, "name" varchar);
CREATE TABLE IF NOT EXISTS "lead_notes" ("id" integer primary key autoincrement not null, "lead_id" integer not null, "notes" text, "user_id" integer not null, "created_at" datetime, "updated_at" datetime, "deleted_at" datetime, foreign key("lead_id") references "leads"("id") on delete restrict on update restrict, foreign key("user_id") references "users"("id") on delete restrict on update restrict);
CREATE TABLE IF NOT EXISTS "lead_status_logs" ("id" integer primary key autoincrement not null, "lead_id" integer not null, "status_id" integer not null, "created_at" datetime, "updated_at" datetime, "deleted_at" datetime, foreign key("lead_id") references "leads"("id") on delete restrict on update restrict, foreign key("status_id") references "lead_statuses"("id") on delete restrict on update restrict);
CREATE TABLE IF NOT EXISTS "lead_meeting_reschedules" ("id" integer primary key autoincrement not null, "meeting_id" integer not null, "old_scheduled_start_at" datetime, "old_scheduled_end_at" datetime, "old_online_url" varchar, "new_online_url" varchar, "new_scheduled_start_at" datetime, "new_scheduled_end_at" datetime, "old_location" varchar, "new_location" varchar, "reason" varchar, "rescheduled_by" integer not null, "rescheduled_at" datetime, "created_at" datetime, "updated_at" datetime, "deleted_at" datetime, foreign key("meeting_id") references "lead_meetings"("id") on delete restrict on update restrict, foreign key("rescheduled_by") references "users"("id") on delete restrict on update restrict);
CREATE TABLE IF NOT EXISTS "lead_claims" ("id" integer primary key autoincrement not null, "lead_id" integer not null, "sales_id" integer not null, "claimed_at" datetime, "released_at" datetime, "created_at" datetime, "updated_at" datetime, "deleted_at" datetime, "trash_note" text, foreign key("lead_id") references "leads"("id") on delete restrict on update restrict, foreign key("sales_id") references "users"("id") on delete restrict on update restrict);
CREATE TABLE IF NOT EXISTS "meeting_expenses" ("id" integer primary key autoincrement not null, "meeting_id" integer not null, "sales_id" integer not null, "amount" double not null, "status" varchar check ("status" in ('draft', 'submitted', 'approved', 'rejected', 'canceled')) not null default 'draft', "requested_at" datetime, "created_at" datetime, "updated_at" datetime, "deleted_at" datetime, foreign key("meeting_id") references "lead_meetings"("id") on delete restrict on update restrict, foreign key("sales_id") references "users"("id") on delete restrict on update restrict);
CREATE TABLE IF NOT EXISTS "meeting_expense_details" ("id" integer primary key autoincrement not null, "meeting_expense_id" integer not null, "expense_type_id" integer not null, "amount" double not null, "notes" text, "created_at" datetime, "updated_at" datetime, "deleted_at" datetime, foreign key("meeting_expense_id") references "meeting_expenses"("id") on delete cascade on update cascade, foreign key("expense_type_id") references "ref_expense_types"("id") on delete restrict on update restrict);
CREATE TABLE IF NOT EXISTS "quotations" ("id" integer primary key autoincrement not null, "lead_id" integer not null, "quotation_no" varchar, "status" varchar check ("status" in ('draft', 'review', 'published', 'rejected', 'expired')), "subtotal" double, "tax_pct" double not null default '11', "tax_total" double, "grand_total" double, "booking_fee" double, "expiry_date" date, "created_by" integer not null, "created_at" datetime, "updated_at" datetime, "deleted_at" datetime, foreign key("lead_id") references "leads"("id") on delete restrict on update restrict, foreign key("created_by") references "users"("id") on delete restrict on update restrict);
CREATE TABLE IF NOT EXISTS "quotation_items" ("id" integer primary key autoincrement not null, "quotation_id" integer not null, "product_id" integer, "qty" double not null default '1', "description" text, "unit_price" double, "discount_pct" double, "line_total" double, "created_at" datetime, "updated_at" datetime, "deleted_at" datetime, foreign key("quotation_id") references "quotations"("id") on delete restrict on update restrict, foreign key("product_id") references "ref_products"("id") on delete restrict on update restrict);
CREATE TABLE IF NOT EXISTS "quotation_reviews" ("id" integer primary key autoincrement not null, "quotation_id" integer not null, "reviewer_id" integer not null, "role" varchar check ("role" in ('BM', 'SD')), "decision" varchar check ("decision" in ('approve', 'reject')), "notes" text, "incentive_nominal" numeric not null default '0', "decided_at" datetime, "created_at" datetime, "updated_at" datetime, "deleted_at" datetime, foreign key("quotation_id") references "quotations"("id") on delete restrict on update restrict, foreign key("reviewer_id") references "users"("id") on delete restrict on update restrict);
CREATE TABLE IF NOT EXISTS "quotation_payment_terms" ("id" integer primary key autoincrement not null, "quotation_id" integer not null, "term_no" integer not null, "percentage" double not null, "created_at" datetime, "updated_at" datetime, "deleted_at" datetime, "description" varchar, foreign key("quotation_id") references "quotations"("id") on delete restrict on update restrict);
CREATE TABLE IF NOT EXISTS "user_balances" ("id" integer primary key autoincrement not null, "user_id" integer not null, "total_balance" double not null default '0', "updated_at" datetime, foreign key("user_id") references "users"("id") on delete restrict on update restrict);
CREATE TABLE IF NOT EXISTS "user_balance_logs" ("id" integer primary key autoincrement not null, "user_id" integer not null, "amount" double not null, "quotation_id" integer not null, "description" varchar, "status" varchar check ("status" in ('pending', 'received', 'expired')) not null, "created_at" datetime, foreign key("user_id") references "users"("id") on delete restrict on update restrict, foreign key("quotation_id") references "quotations"("id") on delete restrict on update restrict);
CREATE TABLE IF NOT EXISTS "proformas" ("id" integer primary key autoincrement not null, "quotation_id" integer not null, "term_no" integer, "proforma_type" varchar check ("proforma_type" in ('booking_fee', 'down_payment', 'term_payment')), "proforma_no" varchar, "amount" double, "status" varchar check ("status" in ('pending', 'confirmed')), "issued_by" integer, "issued_at" datetime, "attachment_id" integer, "created_at" datetime, "updated_at" datetime, "deleted_at" datetime, foreign key("quotation_id") references "quotations"("id") on delete restrict on update restrict, foreign key("issued_by") references "users"("id") on delete restrict on update restrict, foreign key("attachment_id") references "attachments"("id") on delete restrict on update restrict);
CREATE TABLE IF NOT EXISTS "orders" ("id" integer primary key autoincrement not null, "lead_id" integer not null, "order_no" varchar, "total_billing" double, "order_status" varchar check ("order_status" in ('publish', 'in_progress', 'delivered', 'confirmed', 'done', 'canceled')), "created_at" datetime, "updated_at" datetime, "deleted_at" datetime, foreign key("lead_id") references "leads"("id") on delete restrict on update restrict);
CREATE TABLE IF NOT EXISTS "order_items" ("id" integer primary key autoincrement not null, "order_id" integer not null, "product_id" integer, "description" text, "qty" double, "unit_price" double, "discount_pct" double, "tax_pct" double, "line_total" double, "created_at" datetime, "updated_at" datetime, "deleted_at" datetime, foreign key("order_id") references "orders"("id") on delete restrict on update restrict, foreign key("product_id") references "ref_products"("id") on delete restrict on update restrict);
CREATE TABLE IF NOT EXISTS "order_payment_terms" ("id" integer primary key autoincrement not null, "order_id" integer not null, "term_no" integer not null, "percentage" double not null, "created_at" datetime, "updated_at" datetime, "deleted_at" datetime, foreign key("order_id") references "orders"("id") on delete restrict on update restrict);
CREATE TABLE IF NOT EXISTS "invoices" ("id" integer primary key autoincrement not null, "proforma_id" integer not null, "invoice_no" varchar, "invoice_type" varchar check ("invoice_type" in ('booking_fee', 'down_payment', 'final')), "amount" double, "due_date" date, "status" varchar check ("status" in ('open', 'paid', 'partial', 'void')), "attachment_id" integer, "issued_at" datetime, "created_at" datetime, "updated_at" datetime, "deleted_at" datetime, foreign key("proforma_id") references "proformas"("id") on delete restrict on update restrict, foreign key("attachment_id") references "attachments"("id") on delete restrict on update restrict);
CREATE TABLE IF NOT EXISTS "invoice_items" ("id" integer primary key autoincrement not null, "invoice_id" integer not null, "description" text, "amount" double, "created_at" datetime, "updated_at" datetime, "deleted_at" datetime, foreign key("invoice_id") references "invoices"("id") on delete restrict on update restrict);
CREATE TABLE IF NOT EXISTS "invoice_payments" ("id" integer primary key autoincrement not null, "invoice_id" integer not null, "paid_at" datetime, "amount" double, "attachment_id" integer not null, "confirmed_by" integer not null, "created_at" datetime, "updated_at" datetime, "deleted_at" datetime, foreign key("invoice_id") references "invoices"("id") on delete restrict on update restrict, foreign key("attachment_id") references "attachments"("id") on delete restrict on update restrict, foreign key("confirmed_by") references "users"("id") on delete restrict on update restrict);
CREATE TABLE IF NOT EXISTS "users" ("id" integer primary key autoincrement not null, "role_id" integer not null, "company_id" integer, "branch_id" integer, "name" varchar, "email" varchar, "nip" varchar, "phone" varchar, "password" varchar, "remember_token" varchar, "created_by" integer, "updated_by" integer, "created_at" datetime, "updated_at" datetime, "deleted_at" datetime, foreign key("updated_by") references users("id") on delete set null on update no action, foreign key("created_by") references users("id") on delete set null on update no action, foreign key("branch_id") references ref_branches("id") on delete restrict on update restrict, foreign key("company_id") references ref_companies("id") on delete restrict on update restrict, foreign key("role_id") references user_roles("id") on delete restrict on update restrict);
INSERT INTO users VALUES(1,1,NULL,NULL,'Admin','admin@test.com','123456','08123456789','$2y$12$PDd4r/vjr.Lhe7zUnT.OzOAyM8TrAaD0PPBAOdxlSx4d2w3TLlnQ6',NULL,NULL,NULL,'2025-09-06 12:24:32','2025-09-07 03:04:43',NULL);
CREATE TABLE IF NOT EXISTS "ref_product_types" ("id" integer primary key autoincrement not null, "name" varchar not null, "created_at" datetime, "updated_at" datetime);
CREATE TABLE IF NOT EXISTS "ref_products" ("id" integer primary key autoincrement not null, "sku" varchar, "name" varchar, "description" text, "vat" integer, "corporate_price" double, "government_price" double, "personal_price" double, "warranty_available" tinyint(1) not null default ('0'), "warranty_time_month" integer, "created_at" datetime, "updated_at" datetime, "deleted_at" datetime, "fob_price" double, "product_type_id" integer, "bdi_price" double, foreign key("product_type_id") references "ref_product_types"("id") on delete set null);
CREATE TABLE IF NOT EXISTS "ref_customer_types" ("id" integer primary key autoincrement not null, "name" varchar not null, "created_at" datetime, "updated_at" datetime, "deleted_at" datetime);
INSERT INTO ref_customer_types VALUES(1,'Corporate',NULL,NULL,NULL);
INSERT INTO ref_customer_types VALUES(2,'Government',NULL,NULL,NULL);
INSERT INTO ref_customer_types VALUES(3,'Personal',NULL,NULL,NULL);
INSERT INTO ref_customer_types VALUES(4,'Repeat Order',NULL,NULL,NULL);
INSERT INTO ref_customer_types VALUES(5,'Distributor',NULL,NULL,NULL);
INSERT INTO ref_customer_types VALUES(6,'Tender-based',NULL,NULL,NULL);
INSERT INTO ref_customer_types VALUES(7,'Commanditaire Vennootschap',NULL,NULL,NULL);
INSERT INTO ref_customer_types VALUES(8,'Institution',NULL,NULL,NULL);
INSERT INTO ref_customer_types VALUES(9,'Hospital',NULL,NULL,NULL);
INSERT INTO ref_customer_types VALUES(10,'Foundation',NULL,NULL,NULL);
CREATE TABLE IF NOT EXISTS "finance_requests" ("id" integer primary key autoincrement not null, "request_type" varchar check ("request_type" in ('meeting-expense', 'proforma', 'invoice', 'payment-confirmation')), "reference_id" varchar, "requester_id" integer not null, "status" varchar, "approver_id" integer, "decided_at" datetime, "notes" text, "created_at" datetime, "updated_at" datetime, "deleted_at" datetime, foreign key("approver_id") references users("id") on delete restrict on update restrict, foreign key("requester_id") references users("id") on delete restrict on update restrict);
CREATE TABLE IF NOT EXISTS "payment_confirmations" ("id" integer primary key autoincrement not null, "proforma_id" integer not null, "payer_name" varchar, "payer_bank" varchar, "payer_account_number" varchar, "paid_at" datetime, "amount" double, "attachment_id" integer not null, "confirmed_by" integer, "confirmed_at" datetime, "created_at" datetime, "updated_at" datetime, "deleted_at" datetime, foreign key("confirmed_by") references users("id") on delete restrict on update restrict, foreign key("attachment_id") references attachments("id") on delete restrict on update restrict, foreign key("proforma_id") references proformas("id") on delete restrict on update restrict);
CREATE TABLE IF NOT EXISTS "meeting_types" ("id" integer primary key autoincrement not null, "name" varchar not null, "created_at" datetime, "updated_at" datetime, "deleted_at" datetime);
INSERT INTO meeting_types VALUES(1,'Zoom / Google Meet',NULL,NULL,NULL);
INSERT INTO meeting_types VALUES(2,'Offline - Office',NULL,NULL,NULL);
INSERT INTO meeting_types VALUES(3,'Offline - Canvass',NULL,NULL,NULL);
INSERT INTO meeting_types VALUES(4,'Video Call',NULL,NULL,NULL);
CREATE TABLE IF NOT EXISTS "ref_industries" ("id" integer primary key autoincrement not null, "name" varchar not null, "created_at" datetime, "updated_at" datetime, "deleted_at" datetime);
CREATE TABLE IF NOT EXISTS "ref_jabatans" ("id" integer primary key autoincrement not null, "name" varchar not null, "created_at" datetime, "updated_at" datetime, "deleted_at" datetime);
CREATE TABLE IF NOT EXISTS "leads" ("id" integer primary key autoincrement not null, "source_id" integer not null, "segment_id" integer, "region_id" integer, "province" varchar, "status_id" integer not null, "name" varchar, "phone" varchar, "email" varchar, "product_id" integer, "needs" varchar, "published_at" datetime, "created_at" datetime, "updated_at" datetime, "branch_id" integer, "first_sales_id" integer, "company" varchar, "customer_type" varchar, "tonase" numeric, "industry_id" integer, "jabatan_id" integer, "other_industry" varchar, foreign key("industry_id") references ref_industries("id") on delete restrict on update restrict, foreign key("first_sales_id") references users("id") on delete restrict on update restrict, foreign key("product_id") references ref_products("id") on delete restrict on update restrict, foreign key("status_id") references lead_statuses("id") on delete restrict on update restrict, foreign key("region_id") references ref_regions("id") on delete restrict on update restrict, foreign key("segment_id") references lead_segments("id") on delete restrict on update restrict, foreign key("source_id") references lead_sources("id") on delete restrict on update restrict, foreign key("branch_id") references ref_branches("id") on delete restrict on update restrict, foreign key("jabatan_id") references "ref_jabatans"("id") on delete restrict on update restrict);
CREATE TABLE IF NOT EXISTS "quotation_signed_documents" ("id" integer primary key autoincrement not null, "quotation_id" integer not null, "attachment_id" integer not null, "description" text, "signed_date" date, "uploader_id" integer not null, "created_at" datetime, "updated_at" datetime, "deleted_at" datetime, foreign key("quotation_id") references "quotations"("id") on delete restrict on update restrict, foreign key("attachment_id") references "attachments"("id") on delete restrict on update restrict, foreign key("uploader_id") references "users"("id") on delete restrict on update restrict);
CREATE TABLE IF NOT EXISTS "lead_pic_extensions" ("id" integer primary key autoincrement not null, "lead_id" integer not null, "nama" varchar, "email" varchar, "phone" varchar, "title" varchar, "created_at" datetime, "updated_at" datetime, "deleted_at" datetime, "jabatan_id" integer, foreign key("lead_id") references leads("id") on delete restrict on update restrict, foreign key("jabatan_id") references "ref_jabatans"("id") on delete restrict on update restrict);
CREATE TABLE IF NOT EXISTS "order_progress_logs" ("id" integer primary key autoincrement not null, "order_id" integer not null, "progress_step" varchar, "note" text, "logged_at" datetime, "user_id" integer not null, "created_at" datetime, "updated_at" datetime, "deleted_at" datetime, "attachment_id" integer, foreign key("user_id") references users("id") on delete restrict on update restrict, foreign key("order_id") references orders("id") on delete restrict on update restrict, foreign key("attachment_id") references "attachments"("id") on delete restrict on update restrict);
CREATE TABLE IF NOT EXISTS "quotation_logs" ("id" integer primary key autoincrement not null, "quotation_id" integer not null, "action" varchar not null, "user_id" integer not null, "logged_at" datetime, "created_at" datetime, "updated_at" datetime, "deleted_at" datetime, foreign key("quotation_id") references "quotations"("id") on delete restrict on update restrict, foreign key("user_id") references "users"("id") on delete restrict on update restrict);
CREATE TABLE IF NOT EXISTS "lead_meetings" ("id" integer primary key autoincrement not null, "lead_id" integer not null, "is_online" tinyint(1), "online_url" varchar, "scheduled_start_at" datetime, "scheduled_end_at" datetime, "city" varchar, "address" varchar, "result" varchar check ("result" in ('yes', 'no', 'expired', 'waiting')), "summary" text, "attachment_id" integer, "created_at" datetime, "updated_at" datetime, "deleted_at" datetime, "meeting_type_id" integer, foreign key("meeting_type_id") references meeting_types("id") on delete set null on update no action, foreign key("lead_id") references leads("id") on delete restrict on update restrict, foreign key("attachment_id") references attachments("id") on delete restrict on update restrict);
CREATE TABLE IF NOT EXISTS "lead_activity_lists" ("id" integer primary key autoincrement not null, "code" varchar not null, "name" varchar not null, "description" varchar, "created_at" datetime, "updated_at" datetime, "deleted_at" datetime);
CREATE TABLE IF NOT EXISTS "payment_logs" ("id" integer primary key autoincrement not null, "quotation_id" integer not null, "proforma_id" integer, "invoice_id" integer, "type" varchar check ("type" in ('confirmation', 'proforma', 'invoice')) not null, "user_id" integer not null, "logged_at" datetime, "created_at" datetime, "updated_at" datetime, "deleted_at" datetime, foreign key("quotation_id") references "quotations"("id") on delete restrict on update restrict, foreign key("proforma_id") references "proformas"("id") on delete restrict on update restrict, foreign key("invoice_id") references "invoices"("id") on delete restrict on update restrict, foreign key("user_id") references "users"("id") on delete restrict on update restrict);
CREATE TABLE IF NOT EXISTS "lead_activity_logs" ("id" integer primary key autoincrement not null, "lead_id" integer not null, "activity_id" integer not null, "note" text, "logged_at" datetime, "user_id" integer not null, "created_at" datetime, "updated_at" datetime, "deleted_at" datetime, "attachment_id" integer, foreign key("user_id") references users("id") on delete restrict on update restrict, foreign key("activity_id") references lead_activity_lists("id") on delete restrict on update restrict, foreign key("lead_id") references leads("id") on delete restrict on update restrict, foreign key("attachment_id") references "attachments"("id") on delete restrict on update restrict);
CREATE TABLE IF NOT EXISTS "cache" ("key" varchar not null, "value" text not null, "expiration" integer not null, primary key ("key"));
CREATE TABLE IF NOT EXISTS "cache_locks" ("key" varchar not null, "owner" varchar not null, "expiration" integer not null, primary key ("key"));
DELETE FROM sqlite_sequence;
INSERT INTO sqlite_sequence VALUES('migrations',50);
INSERT INTO sqlite_sequence VALUES('users',1);
INSERT INTO sqlite_sequence VALUES('ref_products',0);
INSERT INTO sqlite_sequence VALUES('lead_sources',3);
INSERT INTO sqlite_sequence VALUES('user_permissions',23);
INSERT INTO sqlite_sequence VALUES('ref_customer_types',10);
INSERT INTO sqlite_sequence VALUES('finance_requests',0);
INSERT INTO sqlite_sequence VALUES('payment_confirmations',0);
INSERT INTO sqlite_sequence VALUES('leads',0);
INSERT INTO sqlite_sequence VALUES('lead_pic_extensions',0);
INSERT INTO sqlite_sequence VALUES('order_progress_logs',0);
INSERT INTO sqlite_sequence VALUES('lead_meetings',0);
INSERT INTO sqlite_sequence VALUES('lead_activity_logs',0);
INSERT INTO sqlite_sequence VALUES('user_role_permissions',76);
INSERT INTO sqlite_sequence VALUES('user_roles',9);
INSERT INTO sqlite_sequence VALUES('meeting_types',4);
CREATE INDEX "password_reset_tokens_email_index" on "password_reset_tokens" ("email");
CREATE UNIQUE INDEX "users_nip_unique" on "users" ("nip");
CREATE UNIQUE INDEX "lead_activity_lists_code_unique" on "lead_activity_lists" ("code");
COMMIT;
